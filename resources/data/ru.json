{
  "DataStructures": {
    "Title": "Структуры данных",
    "Array": {
      "Title": "Массив",
      "Term": "    Массив - это структура данных, хранящая набор значений (элементов массива), идентифицируемых с помощью одного или нескольких индексов. Доступ к каждому из элементов массива осуществляется по индексу этого элемента. Индекс - это число, которое означает положение элемента в массиве.",
      "Types": "Типы массивов\n",
      "TypeStatic": {
        "Title": "Статический\n",
        "Term": "    Обычные массивы называют статическими (фиксированными). Массив является статическим, потому что мы задаем конкретный размер массива при написании кода программы и он не меняется во время исполнения\n"
      },
      "TypeDynamic": {
        "Title": "Динамический\n",
        "Term": "    Динамическим называется массив, размер которого может изменяться во время исполнения программы. Динамические массивы дают возможность более гибкой работы с данными, так как позволяют не прогнозировать хранимые объёмы данных, а регулировать размер массива в соответствии с реально необходимыми объёмами.\n"
      },
      "TypeHeterogeneous": {
        "Title": "Гетерогенный\n",
        "Term": "    Гетерогенным называется массив, в разные элементы которого могут быть непосредственно записаны значения, относящиеся к различным типам данных.\n"
      },
      "Memory": {
        "Title": "Память",
        "Term": "    Данные хранятся в памяти последовательно (один за другим). Из этого следует то, что адрес каждого элемента массива может быть вычислен с помощью индекса. Это позволяет организовать произвольный доступ к данным."
      },
      "Features": {
        "Title": "Особенности",
        "Feature_1": "● Одинаковое время доступа ко всем элементам массива\n",
        "Feature_2": "● Невозможность удаления или добавления элемента без сдвига других элементов массива\n",
        "Feature_3": "● Легко вычислить адрес элемента по его индексу, поскольку элементы распологаются одни за другим\n"
      }
    },
    "Queue": {
      "Title": "Очередь",
      "Term": "    Очередь - это струтура данных, в которой данные хранятся по принципу: \"Первый вошел - первый вышел\" (FIFO - first in first out). Исходя из определения мы не можем получить доступ к произвольному элементу очереди. У очереди существует голова (head) и хвост (tail). Когда элемента доабвляется (enqueue) в очередь, он занимает место в ее хвосте, выборка (dequeue) же элемента осуществляется из начала (головы) очереди, при этом выбранный элементы из очереди удаляется."
    },
    "Stack": {
      "Title": "Стек",
      "Term": "    Стек - это структура данных, в которой данные хранятся по принципу: \"Последним пришел - первым вышел\" (LIFO - last in first out). Одна из возможных реализациий стека - это реализация в виде однонправленного списка. При такой реализации каждый элеменет в списке содержит помимо хранимой информации в стеке указатель на следующий элемент стека. Стоит отметить, что занчение переменной стека, явлется указателем на его вершину, то есть хранит адрес вершины."
    },
    "Set": {
      "Title": "Множество"
    },
    "Map": {
      "Title": "Карта"
    }
  },
  "Algorithms": {
    "Title": "Алгоритмы"
  }
}
